<?php
function oo_alterations_init() {
  // Load in our custom JavaScript.
  drupal_add_js(drupal_get_path('module', 'oo_alterations') . '/js/oo_alterations.js', array('weight' => 99));
  if (!drupal_installation_attempted() && (arg(0) == 'node' && arg(1) != '')) {
    $done = &drupal_static(__FUNCTION__, NULL);
    if (!isset($done['oo_alterations_init'])) {
      $done['oo_alterations_init'] = TRUE;
      // Load in Drupal core AJAX library.
      drupal_add_library('system', 'drupal.ajax');

      drupal_add_js(drupal_get_path('module', 'hybridauth') . '/js/hybridauth.js');
      drupal_add_css(drupal_get_path('module', 'hybridauth') . '/css/hybridauth.css');
      $icon_pack = hybridauth_get_icon_pack(variable_get('hybridauth_widget_icon_pack', 'hybridauth_32'));
      if (!empty($icon_pack['css'])) {
        drupal_add_css($icon_pack['path'] . '/' . $icon_pack['css']);
      }
      if (!empty($icon_pack['js'])) {
        drupal_add_js($icon_pack['path'] . '/' . $icon_pack['js']);
      }
    }
  }
}

function oo_alterations_menu(){
  // Returns AJAX commands if the user has JavaScript turned on.
  $items['login/ajax'] = array(
    'title' => 'ajax callback',
    'page callback' => 'oo_alterations_login_ajax_callback',
    'page arguments' => array(1),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  // Returns a Non-JavaScript alternative.
  $items['login/nojs'] = array(
    'title' => 'non-javascript callback',
    'page callback' => 'oo_alterations_login_ajax_callback',
    'page arguments' => array(1),
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  
  $items['createcourse/ajax'] = array(
    'title' => 'ajax callback for create new course button',
    'page callback' => 'oo_createcourse_button_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['createcourse/nojs'] = array(
    'title' => 'non ajax callback for create course button',
    'page callback' => 'oo_createcourse_button_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * AJAX callback for inline login.
 */
function oo_alterations_login_ajax_callback($js) {
  if($js == 'nojs'){
    drupal_goto("login", array("destination" => $_GET['q']));
    return;
  }
  // Define a new array to hold our AJAX commands.
  $ajax_commands = array();

  $login_html = drupal_render(drupal_get_form('user_login'));
  if($_SESSION['messages']['error']){
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
  if (!empty($_POST['target'])) {
    $target = $_POST['target'];
  }
  // Create a new AJAX command that replaces the #page text with our own text.
  $ajax_commands[] = ajax_command_replace($target, $login_html);
  $ajax_commands[] = ajax_command_invoke($target, 'hide');
  $ajax_commands[] = ajax_command_invoke($target, 'fadeIn', array(1000));

//   $ajax_commands[] = ajax_command_after('.comment-ajax-login', $login_html);
  // Return our commands in JSON.
//   $commands[] = ajax_command_replace('.some-class', date('G:i:s'));
//   $page = array('#type' => 'ajax', '#commands' => $ajax_commands);
//   ajax_deliver($page);
  return drupal_json_output($ajax_commands);
}

/**
 * Implements hook_preprocess_field
 * @param mixed $vars
 */
function oo_alterations_preprocess_field(&$vars){
  if($vars['element']['#field_name'] == 'field_hinta'){
    $entity_type = $vars['element']['#entity_type'];
    $entity = $vars['element']['#object'];
    $price_type = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_hinnan_tyyppi')));
    $gid = $entity->nid;
    if(isset($price_type)){
      if($price_type == 0){
        $price = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_hinta')));
        $min_participants = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_minimi_osallistujat')));
        $price_calculated = $price .'€';
        $query = db_select('users', 'u');
        $query
        ->condition('u.uid', 0, '<>')
        ->condition('u.status', 1, '=')
        ->fields('u', array('uid', 'name'))
        ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
        $result = $query->execute();
        $memberCount = $result->rowCount();
        if($memberCount != 0){
          if (($price/$memberCount) < ($price/$min_participants)) {
            $price_calculated = ($price/$memberCount);
          }else {
            $price_calculated = ($price/$min_participants);
          }
        }
        $vars['items'][0]['#markup'] = filter_xss(round($price_calculated, 2, PHP_ROUND_HALF_UP) . '€');
      }
    }
  }elseif($vars['element']['#field_name'] == 'field_kurssi_alkaa'){
    $entity_type = $vars['element']['#entity_type'];
    $entity = $vars['element']['#object'];
    $course_state = array_pop(field_get_items($entity_type, $entity, 'field_kurssin_tila'));
    $course_state = $course_state['value'];
    if($course_state == 3){
      $vars['items'][0]['#markup'] = t("Kurssi on päättynyt");
    }else{
      $begins_date = array_pop(field_get_items($entity_type, $entity, 'field_kurssi_alkaa'));
      $begins_date = $begins_date['value'];
      $begins_date = strtotime($begins_date);
      if($begins_date < time()){
        $vars['items'][0]['#markup'] = t("Kurssi on käynnissä");
      }      
    }
  }elseif($vars['element']['#field_name'] == 'field_jarjestajan_logo'){
    $entity_type = $vars['element']['#entity_type'];
    $entity = $vars['element']['#object'];
    $link = array_pop(field_get_items($entity_type, $entity, 'field_logon_linkki'));
    $link = $link['url'];
    if(startsWith($link, 'http://') || startsWith($link, 'https://')){
      $vars['items'][0]['#path'] = array(
        'path' => $link,
        'options' => array('html' => TRUE, 'absolute' => TRUE, 'target' => '_blank'),
      );
    }else{
      $link = 'http://' . $link;
      $vars['items'][0]['#path'] = array(
        'path' => $link,
        'options' => array('html' => TRUE, 'absolute' => TRUE, 'target' => '_blank'),
      );
    }

  }
}
function startsWith($haystack, $needle)
{
  $length = strlen($needle);
  return (substr($haystack, 0, $length) === $needle);
}
/**
 * Implementation of hook_mail_alter()
 */
function oo_alterations_mail_alter(&$message) {
  $message['Content-Type'] = $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  $message['From'] = $message['headers']['From'] = '"aPaja" <apaja@otavanopisto.fi>';
  $message['Reply-to'] = $message['headers']['Reply-to'] = '"aPaja" <apaja@otavanopisto.fi>';
  $message['Return-Path'] = $message['headers']['Return-Path'] = '"aPaja" <apaja@otavanopisto.fi>';
}

/**
 * Implementation of hook_form_alter
 **/
function oo_alterations_form_alter(&$form, $form_state, $form_id) {
  if($form_id == 'user_profile_form'){
    $form['field_account_lahiosoite']['user_field_privacy']['#default_value'] = true;
    $form['field_account_lahiosoite']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_lahiosoite']['user_field_privacy']['#type'] = 'hidden';
    $form['field_account_postinumero']['user_field_privacy']['#default_value'] = true;
    $form['field_account_postinumero']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_postinumero']['user_field_privacy']['#type'] = 'hidden';
    $form['field_account_postitoimipaikka']['user_field_privacy']['#default_value'] = true;
    $form['field_account_postitoimipaikka']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_postitoimipaikka']['user_field_privacy']['#type'] = 'hidden';
    // User language switcher
    $form['locale']['#type'] = 'hidden';
  }elseif($form_id == 'user_register_form'){
    $form['field_account_lahiosoite']['user_field_privacy']['#default_value'] = true;
    $form['field_account_lahiosoite']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_lahiosoite']['user_field_privacy']['#type'] = 'hidden';
    $form['field_account_postinumero']['user_field_privacy']['#default_value'] = true;
    $form['field_account_postinumero']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_postinumero']['user_field_privacy']['#type'] = 'hidden';
    $form['field_account_postitoimipaikka']['user_field_privacy']['#default_value'] = true;
    $form['field_account_postitoimipaikka']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_postitoimipaikka']['user_field_privacy']['#type'] = 'hidden';
  }elseif($form_id == 'user_login'){
    if(($form['#action'] == '/login/ajax') || (strstr($form["#action"], "subscribe/ajax"))){
      $form['destination']['#type'] = 'value';
      $form['destination']['#value'] = check_plain(filter_xss($_SERVER['HTTP_REFERER']));
      $form['#submit'][] = 'oo_alterations_user_login_submit';      
    }
  }elseif($form_id == 'comment_node_blog_entry_form'){
    unset($form['author']['_author']);
    $js = 'jQuery(document).ready(function($) {
        $("#' . $form['#id'] . ' fieldset.filter-wrapper").hide();
      });';
    drupal_add_js($js, 'inline');
  }
}

/**
 * Sets shutdown function to perform redirects later.
 */
function oo_alterations_user_login_submit(&$form, &$form_state) {
  if (isset($form_state['values']['destination'])) {
    $destination = check_plain(filter_xss($form_state['values']['destination']));
    if (valid_url($destination, TRUE)) {
      drupal_register_shutdown_function('oo_alterations_perform_redirect', $destination);
    }
  }
}

/**
 * Perform redirects.
 */
function oo_alterations_perform_redirect($destination) {
  drupal_goto($destination, array('external' => TRUE));
}

/**
* Implements hook_block_info().
*/
function oo_alterations_block_info() {
  $blocks = array();
  $blocks['oo_og_create_tapahtuma'] = array(
      'info' => t('Group tapahtuma creating block'),
  );
  
  $blocks['oo_blog_authors'] = array(
      'info' => t('Shows user that have written blog entrys'),
  );

  $blocks['oo_create_course'] = array(
      'info' => t('Creates "Perusta uusi kurssi" button to be used in header.'),
  );
  
  $blocks['oo_get_group_admins'] = array(
      'info' => t('Groups admin list with avatars'),
  );

  $blocks['oo_course_attendees'] = array(
      'info' => t('Course attendees'),
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function oo_alterations_block_configure($delta='') {
  $form = array();
  switch($delta) {
    case 'oo_og_create_tapahtuma' :
      break;
    case 'oo_blog_authors' : 
      break;
    case 'oo_create_course' :
      break;
    case 'oo_get_group_admins' :
      break;
    case 'oo_course_attendees' : 
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function oo_alterations_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'oo_og_create_tapahtuma' :
      break;
    case 'oo_blog_authors' :
      break;
    case 'oo_create_course' :
      break;
    case 'oo_get_group_admins' :
      break;
    case 'oo_course_attendees' :
      break;
  }
}

/**
 * Implements hook_block_view().
 */
function oo_alterations_block_view($delta='') {
  $block = array();
  // Block output in HTML with div wrapper
  switch($delta) {
    case 'oo_og_create_tapahtuma' :
      $block['content'] = _oo_og_create_link_view();
      break;
    case 'oo_blog_authors' :
      $block['content'] = _oo_blog_author_view();
      break;
    case 'oo_create_course' :
      $block['content'] = _oo_create_course_button_view();
      break;
    case 'oo_get_group_admins' :
      $block['content'] = _oo_get_group_admins_view();
      break;
    case 'oo_course_attendees' :
      $block['content'] = _oo_get_course_attendees_view();
      break;
  }

  return $block;
}

function _oo_get_course_attendees_view(){
  $gid = arg(1);
  $rid = 4;
  
  $block = array();
  $block = array(
    'content' => array(
      '#prefix' => '<div class="oo-course-attendees-block">',
      '#type' => 'markup',
      '#suffix' => '</div>',
    ),
  );
  $result = db_query(
  'SELECT DISTINCT etid FROM {og_membership} og_membership WHERE entity_type = \'user\' AND gid = :gid
        AND etid NOT IN (
        SELECT DISTINCT users.uid FROM {users} users
          INNER JOIN {og_users_roles} og_users_roles ON users.uid = og_users_roles.uid
          INNER JOIN {og_membership} og_membership ON og_users_roles.gid = og_membership.gid
        WHERE og_membership.gid = :gid AND og_users_roles.rid = :rid)', array(':gid' => $gid, ':rid' => $rid));
  $items = array();
  foreach ($result as $record) {
    $output = '';
    $author = user_load($record->etid);
    $first_name = array_pop(field_get_items('user', $author, 'field_account_etunimi'));
    $last_name = array_pop(field_get_items('user', $author, 'field_account_sukunimi'));
    $full_name = $first_name["safe_value"] . " " . $last_name['safe_value'];
    $custom_image_field = field_view_field('user', $author, 'field_account_kuva', array(
        'type' => 'image',
        'label' => 'hidden',
        'settings' => array(
            'image_style' => 'avatar_thumbnail',
            'image_link' => 'none', // file or content.
        ),
    ));
    $output = '<div class="course-attendees-row"><div class="group-course-attendee-picture user-picture">'. drupal_render($custom_image_field) . '</div>';
    $author_link = "user/$author->uid";
    if($alias = path_load($author_link)){
      $author_link = $alias["alias"];
    }
    $output .= '<div class="course-attendees course-attendee-name"><a href="/'. $author_link. '">' . $full_name . '</a></div></div>';
    $items[] = array('data' => $output);
  }
  $element['oo_course_attendees'] = array(
      '#theme' => 'item_list',
      '#items' => $items,
  );
  $block["#markup"] = drupal_render($element);
  return $block;
}

function _oo_get_group_admins_view(){
  $gid = arg(1);
  $rid = 4;
  
  $block = array();
  $block = array(
      'content' => array(
          '#prefix' => '<div class="oo-group-admins-block">',
          '#type' => 'markup',
          '#suffix' => '</div>',
      ),
  );
  
  $result = db_query(
    'SELECT DISTINCT users.uid FROM {users} users
       INNER JOIN {og_users_roles} og_users_roles ON users.uid = og_users_roles.uid
       INNER JOIN {og_membership} og_membership ON og_users_roles.gid = og_membership.gid
     WHERE og_membership.gid = :gid AND og_users_roles.rid = :rid', array(':gid' => $gid, ':rid' => $rid));
  $items = array();
  foreach ($result as $record) {
    $output = '';
    $author = user_load($record->uid);
    $first_name = array_pop(field_get_items('user', $author, 'field_account_etunimi'));
    $last_name = array_pop(field_get_items('user', $author, 'field_account_sukunimi'));
    $full_name = $first_name["safe_value"] . " " . $last_name['safe_value'];
    $custom_image_field = field_view_field('user', $author, 'field_account_kuva', array(
        'type' => 'image',
        'label' => 'hidden',
        'settings' => array(
            'image_style' => 'avatar_thumbnail',
            'image_link' => 'none', // file or content.
        ),
    ));
    $output .= '<div class="group-admins-container">';
    $output .= '<div class="group-admin-picture user-picture">'. drupal_render($custom_image_field) . '</div>';
    $author_link = "user/$author->uid";
    if($alias = path_load($author_link)){
      $author_link = $alias["alias"];
    }
    $output .= '<div class="group-admin"><a href="/'. $author_link. '">' . $full_name . '</a></div>';
    $output .= '<div class="group-admin group-admin-mail">'. $author->mail .'</div>';
    $output .= '</div>';
    $items[] = array('data' => $output);
  }
  $element['oo_group_instructors1'] = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#title' => 'Kurssin vetäjät:',
  );
  
  $entity = entity_load_single('node', $gid);
  $attendee_field = field_get_items('node', $entity, 'field_kurssin_vetaja');

  foreach ($attendee_field as $value) {
    $author = user_load(0);
    $custom_image_field = field_view_field('user', $author, 'field_account_kuva', array(
        'type' => 'image',
        'label' => 'hidden',
        'settings' => array(
            'image_style' => 'avatar_thumbnail',
            'image_link' => 'none', // file or content.
        ),
    ));
    $attendee_text = '<div class="group-admins-container">';
    $attendee_text .= '<div class="group-admin-picture user-picture">'. drupal_render($custom_image_field) . '</div>';
    $attendee_text .= '<div class="field-item even">'. $value['safe_value'] .'</div>';
    $attendee_text .= '</div>';
    $items2[] = array('data' => $attendee_text);
  }
  $element['oo_group_instructors2'] = array(
      '#theme' => 'item_list',
      '#items' => $items2,
    
  );
  
  $block["#markup"] = drupal_render($element);
  return $block;
}

function _oo_blog_author_view(){
  $block = array();
  $block = array(
    'content' => array(
        '#prefix' => '<div class="oo-blog-author-block">',
        '#type' => 'markup',
        '#suffix' => '</div>',
    ),
  );
  $result = db_query('SELECT DISTINCT users_node.uid AS uid FROM {node} node LEFT JOIN {users} users_node ON node.uid = users_node.uid 
      WHERE (( (node.status = \'1\') )AND(( (node.type IN  (:content_type)) ))) ', array(':content_type' => 'blog_entry'));
  $items = array();
  foreach ($result as $record) {
    $author = user_load($record->uid);
    $first_name = array_pop(field_get_items('user', $author, 'field_account_etunimi'));
    $last_name = array_pop(field_get_items('user', $author, 'field_account_sukunimi'));
    $full_name = $first_name["safe_value"] . " " . $last_name['safe_value'];
    $custom_image_field = field_view_field('user', $author, 'field_account_kuva', array(
        'type' => 'image',
        'label' => 'hidden',
        'settings' => array(
            'image_style' => 'avatar_thumbnail',
            'image_link' => 'none', // file or content.
        ),
    ));
    $output = '<div class="blog-author-picture user-picture">'. drupal_render($custom_image_field) . '</div>';
    $author_link = "blog/$author->uid";
    if($alias = path_load($author_link)){
      $author_link = $alias["alias"];
    }
    $output .= '<div class="blog-author"><a href="/'. $author_link. '">' . $full_name . '</a></div>';
    $items[] = array('data' => $output);
  }
  $element['oo_blog_authors'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
  );
  $block["#markup"] = drupal_render($element);
  return $block;
}

function _oo_og_create_link_view(){
  $block = array();
  $block = array(
      'content' => array(
          '#prefix' => '<div class="oo-create-tapahtuma-block">',
          '#type' => 'markup',
          '#suffix' => '</div>',
      ),
  );
  $nodeid = arg(1);
  if (!og_is_group('node', $nodeid)) {
    return;
  }
  if (og_is_group_content_type('node', 'tapahtuma') && og_user_access('node', $nodeid, "create tapahtuma content")) {
    // Build links.
    $options = array(
        'query' => array('og_group_ref' => $nodeid),
    );
    
    $options['query'] += drupal_get_destination();
    
    $items[] = array('data' => l("Lisää uusi tapahtuma", 'node/add/' . str_replace('_', '-', 'tapahtuma'), $options));
    $element = array();
    $element['og_node_create_links'] = array(
        '#theme' => 'item_list',
        '#items' => $items,
    );
    $block["#markup"] = drupal_render($element);
  }

  return $block;
}

function _oo_create_course_button_view(){
  global $user;
  $block = array();
  // Block output in HTML with div wrapper
  $block = array(
    'content' => array(
      '#prefix' => '<span class="create-link-container">',
      '#type' => 'markup',
      '#suffix' => '</span>',
    ),
  );

  if (!$user->uid) {
    $block["#markup"] = '<div class="header-discover-search-links-wrapper"><span class="discover-link-container"><a href="/kurssit/kurssitarjonta"><span class="discover-link-big">Etsi</span> <span class="discover-link-small">kursseja</span></a></span><span class="create-link-container">' . 
      l("<span class=\"create-link-big\">Perusta</span><span class=\"create-link-small\">uusi kurssi</span>", "createcourse/nojs", array('html' => true, 'query' => array('destination' => 'node/add/kurssi') ,'attributes' => array('class' => 'use-ajax', 'id' => 'create-course-bt'))) . '</span></div>';
    return $block;
  }else{
    $block["#markup"] = '<div class="header-discover-search-links-wrapper"><span class="discover-link-container"><a href="/kurssit/kurssitarjonta"><span class="discover-link-big">Etsi</span> <span class="discover-link-small">kursseja</span></a></span><span class="create-link-container">' .
      l("<span class=\"create-link-big\">Perusta</span><span class=\"create-link-small\">uusi kurssi</span>", "node/add/kurssi", array('html' => true)) . '</span></div>';
    return $block;    
  }
  
}

function oo_createcourse_button_callback($js){
  global $user;
  if($js == 'nojs'){
    drupal_set_message('Sinulla täytyy olla javascript päällä selaimessasi, jotta sivusto toimisi oikein.', 'error');
    drupal_goto("user/login");
    return;
  }
  $join_html = "";
  if (variable_get('user_register', 1)) {
    $login_link = l("Kirjaudu sisään", "login/nojs", array("attributes" => array("class" => array("subscribe-ajax-login"))));
    $register_link = l(t('Luo tunnukset'), 'modal_forms/nojs/register', array("attributes" => array("class" => array("ctools-use-modal ctools-modal-modal-popup-medium"))));
    $join_html = drupal_render(drupal_get_form('user_login'));
    if($_SESSION['messages']['error']){
      drupal_goto($_SERVER['HTTP_REFERER']);
    }
  }
  else {
    $join_html = '<span class="generic-empty-text">' . $login_link . '</span>';
  }
  $ajax_commands[] = ajax_command_after('#block-oo-alterations-oo-create-course', "<div id='create-course-form-block'><div class='create-course-title-block'>" . t('Perusta uusi kurssi') . "</div><div class='create-course-description-block'>" . t('Luodaksesi kurssin sinun tulee olla rekisteröitynyt ja kirjautunut sisään aPajaan.') . "</div><div class='create-course-description-block'>$register_link " . t('tai kirjaudu ulkoisen palvelun avulla mikäli et vielä omaa tunnuksia sivustolle.') . "</div>$join_html<div class='create-course-arrow-block'></div></div>");
  $ajax_commands[] = ajax_command_invoke('#create-course-form-block', 'hide');
  $ajax_commands[] = ajax_command_invoke('#create-course-form-block', 'fadeIn', array(300));
  return drupal_json_output($ajax_commands);
}

/**
 * Implements hook_wysiwyg_editor_settings_alter()
 */
function oo_alterations_wysiwyg_editor_settings_alter(&$settings, $context) {

  // The $context variable contains information about the wysiwyg profile we're using
  // In this case we just need to check that the editor being used is ckeditor

  if ($context['profile']->editor == 'ckeditor') {

    // The $settings variable contains all the config options ckeditor uses.
    // The array keys correspond directly with any setting that can be applied
    // to CKEditor - as outlined in the CKEditor docs:
    // http://docs.cksource.com/ckeditor_api/symbols/CKEDITOR.config.html
    // Another way to override configuration is to use your own configuration javascript
    // file. In this case, we're going to add our own configuration file that will
    // Hold our stylesSet customizations...
    $settings['customConfig'] = base_path() . drupal_get_path('module', 'oo_alterations') .
    '/js/ckeditor_custom_config.js';

    // We are also going to specify a custom body id and class
//     $settings['bodyId'] = 'ckeditor_custom_id';
//     $settings['bodyClass'] = 'ckeditor_custom_class';

    // To see what's in $settings and $context, install the devel module
    // And run the variables through the dpm() function.
  }
}

function oo_alterations_user_login(&$edit, $account) {
  drupal_set_message('<h3>Tervetuloa aPaja-sivustolle!</h3>
    aPajassa voit osallistua ja rekisteröityä mukaan tarjolla oleville kursseille tai luoda oman unelmien kurssisi.
    Omat kurssisi löydät sivun oikeassa yläkulmassa olevan linkin takaa. <br/><br/>Jos sinulla on mitä tahansa kysyttävää, tai ideoita aPajan -sivuston kehitykseen, ole yhteydessä meihin sähköpostilla apaja@otavanopisto.fi
    <br/><br/>Yst.t. aPaja tiimin puolesta, Johanna', $type = 'status', $repeat = FALSE);
}

?>
