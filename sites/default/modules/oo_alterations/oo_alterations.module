<?php
function oo_alterations_init() {
  if (!drupal_installation_attempted() && (arg(0) == 'node' && arg(1) != '')) {
    // Load in Drupal core AJAX library.
    drupal_add_library('system', 'drupal.ajax');
    // Load in our custom JavaScript.
    drupal_add_js(drupal_get_path('module', 'oo_alterations') . '/js/oo_alterations.js', array('weight' => 99));
  }
}

function oo_alterations_menu(){
  // Returns AJAX commands if the user has JavaScript turned on.
  $items['login/ajax'] = array(
    'title' => 'ajax callback',
    'page callback' => 'oo_alterations_login_ajax_callback',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  // Returns a Non-JavaScript alternative.
  $items['login/nojs'] = array(
    'title' => 'non-javascript callback',
    'page callback' => 'oo_alterations_login_nojs_callback',
    'access callback' => 'user_is_anonymous',
    'type' => MENU_CALLBACK,
  );
  
  $items['course/%/subscribe/ajax'] = array(
    'title' => 'ajax callback for joining the course',
    'page callback' => 'oo_alterations_join_course_callback',
    'page arguments' => array(1,3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['course/%/subscribe/nojs'] = array(
    'title' => 'non ajax callback for joining the course',
    'page callback' => 'oo_alterations_join_course_callback',
    'page arguments' => array(1,3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function oo_alterations_join_course_callback($etid, $js){
  if($js == 'nojs'){
    drupal_set_message('Sinulla täytyy olla javascript päällä selaimessasi, jotta sivusto toimisi oikein.', 'error');
    drupal_goto("group/node/$etid/subscribe/og_user_node");
    return;
//     drupal_exit();
  }
  global $user;
  if (!$user->uid) {
    // Anonymous user can't request membership.
    $dest = drupal_get_destination();
    if (variable_get('user_register', 1)) {
      $login_link = l("Kirjaudu sisään", "login/nojs", array("attributes" => array("class" => array("subscribe-ajax-login"))));
      $register_link = l(t('Luo tunnukset'), 'signup');
      $join_html = '<span class="generic-empty-text">' . $login_link . '</span>';
      $join_html .= '<span class="generic-empty-text"> tai </span>';
      $join_html .= '<span class="generic-empty-text">' . $register_link . '</span>';
      $join_html .= '<span class="generic-empty-text"> Liittyäksesi jäseneksi. </span>';
    }
    else {
      $join_html = '<span class="generic-empty-text">' . $login_link . '</span>';
    }
    $ajax_commands[] = ajax_command_replace('#join-course-block', "<div id='join-course-form-block'>$join_html</div>", array(array("effect" => 'fade')));
    return drupal_json_output($ajax_commands);
  }
  module_load_include('inc', 'og_ui', 'og_ui.pages');
  $entity = entity_load_single('node', $etid);
  list($id, $vid, $bundle) = entity_extract_ids('node', $entity);
  if (empty($field_name)) {
    $field_name = og_get_best_group_audience_field('user', $user->uid, 'node', $bundle);
    if (empty($field_name)) {
      // User entity has no group audience field.
      drupal_set_message('User entity has no group audience field.', 'error');
      return;
    }
  }
  // Define a new array to hold our AJAX commands.
  $ajax_commands = array();
  $join_html = drupal_render(drupal_get_form('og_ui_confirm_subscribe', 'node', $id, $user, $field_name));
  $ajax_commands[] = ajax_command_before('#join-course-block', "<div id='join-course-form-block'>$join_html</div>", array(array("effect" => 'fade')));
  return drupal_json_output($ajax_commands);
}

/**
 * AJAX callback for inline login.
 */
function oo_alterations_login_ajax_callback() {
  // Define a new array to hold our AJAX commands.
  $ajax_commands = array();

  $login_html = drupal_render(drupal_get_form('user_login'));
  if($_SESSION['messages']['error']){
    drupal_goto($_SERVER['HTTP_REFERER']);
  }
  if (!empty($_POST['target'])) {
    $target = $_POST['target'];
  }
  // Create a new AJAX command that replaces the #page text with our own text.
  $ajax_commands[] = ajax_command_replace($target, $login_html, array('#ajax' => array('effect' => 'slide')));
//   $ajax_commands[] = ajax_command_after('.comment-ajax-login', $login_html);
  // Return our commands in JSON.
//   $commands[] = ajax_command_replace('.some-class', date('G:i:s'));
//   $page = array('#type' => 'ajax', '#commands' => $ajax_commands);
//   ajax_deliver($page);
  return drupal_json_output($ajax_commands);
}

/**
 * Non-JavaScript callback that returns hello world.
 */
function oo_alterations_login_nojs_callback() {
  drupal_goto("login", array("destination" => $_GET['q']));
  return;
}

/**
 * Implements hook_preprocess_field
 * @param mixed $vars
 */
function oo_alterations_preprocess_field(&$vars){
  if($vars['element']['#field_name'] == 'field_hinta'){
    $entity_type = $vars['element']['#entity_type'];
    $entity = $vars['element']['#object'];
    $price_type = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_hinnan_tyyppi')));
    $gid = $entity->nid;
    if(isset($price_type)){
      if($price_type == 0){
        $price = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_hinta')));
        $min_participants = array_pop(array_pop(field_get_items($entity_type, $entity, 'field_minimi_osallistujat')));
        $price_calculated = $price .'€';
        $query = db_select('users', 'u');
        $query
        ->condition('u.uid', 0, '<>')
        ->condition('u.status', 1, '=')
        ->fields('u', array('uid', 'name'))
        ->join('og_membership', 'ogm', "ogm.gid = :gid AND u.uid = ogm.etid AND ogm.entity_type = 'user'", array(':gid' => $gid));
        $result = $query->execute();
        $memberCount = $result->rowCount();
        if($memberCount != 0){
          if (($price/$memberCount) < ($price/$min_participants)) {
            $price_calculated = ($price/$memberCount);
          }else {
            $price_calculated = ($price/$min_participants);
          }
        }
        $vars['items'][0]['#markup'] = filter_xss(round($price_calculated, 2, PHP_ROUND_HALF_UP) . '€');
      }
    }
  }
  elseif($vars['element']['#field_name'] == 'field_kurssi_alkaa'){
    $entity_type = $vars['element']['#entity_type'];
    $entity = $vars['element']['#object'];
    $begins_date = array_pop(field_get_items($entity_type, $entity, 'field_kurssi_alkaa'));
    $begins_date = $begins_date['value'];
    $begins_date = strtotime($begins_date);
    if($begins_date < time()){
      $vars['items'][0]['#markup'] = t("Kurssi on käynnissä");
    }
  }
}

/**
 * Implementation of hook_form_alter
 **/
function oo_alterations_form_alter(&$form, $form_state, $form_id) {
  if($form_id == 'user_profile_form'){
    $form['field_account_lahiosoite']['user_field_privacy']['#default_value'] = true;
    $form['field_account_lahiosoite']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_lahiosoite']['user_field_privacy']['#type'] = 'hidden';
    $form['field_account_postinumero']['user_field_privacy']['#default_value'] = true;
    $form['field_account_postinumero']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_postinumero']['user_field_privacy']['#type'] = 'hidden';
    $form['field_account_postitoimipaikka']['user_field_privacy']['#default_value'] = true;
    $form['field_account_postitoimipaikka']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_postitoimipaikka']['user_field_privacy']['#type'] = 'hidden';
    $form['locale']['#type'] = 'hidden';
  }elseif($form_id == 'user_register_form'){
    $form['field_account_lahiosoite']['user_field_privacy']['#default_value'] = true;
    $form['field_account_lahiosoite']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_lahiosoite']['user_field_privacy']['#type'] = 'hidden';
    $form['field_account_postinumero']['user_field_privacy']['#default_value'] = true;
    $form['field_account_postinumero']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_postinumero']['user_field_privacy']['#type'] = 'hidden';
    $form['field_account_postitoimipaikka']['user_field_privacy']['#default_value'] = true;
    $form['field_account_postitoimipaikka']['user_field_privacy']['#attributes']['disabled'] = true;
    $form['field_account_postitoimipaikka']['user_field_privacy']['#type'] = 'hidden';
  }elseif($form_id == 'user_login'){
    if($form['#action'] == '/login/ajax'){
      $form['destination']['#type'] = 'value';
      $form['destination']['#value'] = check_plain(filter_xss($_SERVER['HTTP_REFERER']));
      $form['#submit'][] = 'oo_alterations_user_login_submit';      
    }
  }
}

/**
 * Sets shutdown function to perform redirects later.
 */
function oo_alterations_user_login_submit(&$form, &$form_state) {
  if (isset($form_state['values']['destination'])) {
    $destination = check_plain(filter_xss($form_state['values']['destination']));
    if (valid_url($destination, TRUE)) {
      drupal_register_shutdown_function('oo_alterations_perform_redirect', $destination);
    }
  }
}

/**
 * Perform redirects.
 */
function oo_alterations_perform_redirect($destination) {
  drupal_goto($destination, array('external' => TRUE));
}



?>
